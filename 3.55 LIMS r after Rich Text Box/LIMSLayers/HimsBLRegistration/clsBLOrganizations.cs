using System;
using System.Data;  
using HimsDlRegistration;
using System.Data.OleDb;
using System.Threading;
using System.Globalization;

namespace HimsBLRegistration
{
	/// <summary>
	///		Application	:	Hospital Information & Management System (HIMS)
	///		Class for	:	"Organizations" Table
	///		Developer	:	Trees Software (Pvt) Ltd.
	///		Date		:	August 2004	
	/// 	Type		:	Business Layer Class
	/// </summary>
	

	public class clsBLOrganizations
	{
		clsorganizations ObjDLOrganizations = new clsorganizations(); 
		clsoperation ObjTrans = new clsoperation();
		Validation objValid = new Validation();
		System.Globalization.CultureInfo ObjDateFormat = new CultureInfo("ur-PK");

		private string strErrorMessage = "";	
		private const string Error001 = "Organization Name already exist";
		private const string Error002 = "Invalid value of Registration validity Date";
		private const string Error003 = "Invalid Name of Organization";
		private const string Error004 = "Invalid Email Address is entered. (Leave it empty or in the format (z@z.z)";


		public clsBLOrganizations()
		{
			//
			// TODO: Add constructor logic here
			//
		}


		/// <summary>
		/// Error Message Property
		/// </summary>
		public string ErrorMessage
		{			
			get
			{
				return strErrorMessage;
			}
		}


		/// <summary>
		/// Function to Insert a new Record.
		/// </summary>
		/// <param name="mName">Organization Name.</param>
		/// <param name="mActive">Yes/No (Active or not)</param>
		/// <param name="mOType">Organization Type (F, A, P, M)</param>
		/// <param name="mValidUpto">Registration Validity Date</param>
		/// <param name="mBilling">Yes/No (Billing is active or not)</param>
		/// <returns>True/False (Record is inserted successfully or not)</returns>
		public bool rsInsert(string mName, string mActive, string mOType, string mValidUpto, string mBilling, string mPersonToContact, string mAddress, string mPhoneNo, string mEmail)
		{					
			try
			{
				if(!VD_Name("", mName))
				{
					return false;
				}

				if(mValidUpto.Length > 0)
				{
					if(!VD_Date(mValidUpto)) 
					{						
						return false;
					}
				}

				if(!mEmail.Equals(""))
				{
					if(!objValid.IsEmail(mEmail))
					{
						this.strErrorMessage = Error004;
						return false;
					}
				}
				
				ObjDLOrganizations.Name = mName; 
				ObjDLOrganizations.Active = mActive; 	
				ObjDLOrganizations.OType = mOType; 
				ObjDLOrganizations.ValidUpto = mValidUpto;
				ObjDLOrganizations.Billing = mBilling;
				ObjDLOrganizations.PersonToContact = mPersonToContact;
				ObjDLOrganizations.Address = mAddress;
				ObjDLOrganizations.PhoneNo = mPhoneNo;
				ObjDLOrganizations.Email = mEmail;
				
				ObjTrans.Start_Transaction(); 
				strErrorMessage = ObjTrans.DataTrigger_Insert(ObjDLOrganizations, clsoperation.Get_PKey.Yes);
				ObjTrans.End_Transaction(); 
					
				if (strErrorMessage == "True") 
				{
					strErrorMessage = ObjTrans.OperationError;
					return false;
				}
				strErrorMessage = "";
				return true;
			}
			catch(Exception ex)
			{	
				strErrorMessage=ex.Message.ToString();
				return false;
			}
		}
		

		/// <summary>
		/// To Update any record in the Organization Table.
		/// </summary>
		/// <param name="mOrgID">Organization ID, automatically generated by the application</param>
		/// <param name="mName">Oraganization Name</param>
		/// <param name="mActive">Active or InActive</param>
		/// <param name="mOType">Organization Type (F, A, P, M)</param>
		/// <param name="mValidUpto">Registration Validity Date</param>
		/// <param name="mBilling">Yes/No (Billing is active or not)</param>
		/// <returns>Yes/No (Record is updated successfully or not)</returns>
		public bool rsUpdate(string mOrgID, string mName, string mActive, string mOType, string mValidUpto, 	string mBilling, string mPersonToContact, string mAddress, string mPhoneNo, string mEmail)
		{
			try
			{
				if(!VD_Name(mOrgID, mName))
				{
					return false;
				}

				if(mValidUpto.Length > 0)
				{
					if(VD_Date(mValidUpto) == false) 
					{						
						return false;
					}
				}

				if(!mEmail.Equals(""))
				{
					if(!objValid.IsEmail(mEmail))
					{
						this.strErrorMessage = Error004;
						return false;
					}
				}

				ObjDLOrganizations.PKeycode = mOrgID; 
				ObjDLOrganizations.Name = mName; 
				ObjDLOrganizations.Active = mActive; 		
				ObjDLOrganizations.OType = mOType;
				ObjDLOrganizations.ValidUpto = mValidUpto; 
				ObjDLOrganizations.Billing = mBilling;
				ObjDLOrganizations.PersonToContact = mPersonToContact;
				ObjDLOrganizations.Address = mAddress;
				ObjDLOrganizations.PhoneNo = mPhoneNo;
				ObjDLOrganizations.Email = mEmail;
				
				ObjTrans.Start_Transaction(); 		
				strErrorMessage = ObjTrans.DataTrigger_Update(ObjDLOrganizations);
				ObjTrans.End_Transaction(); 
				
				if (strErrorMessage == "True") 
				{
					strErrorMessage = ObjTrans.OperationError;
					return false;
				}

				strErrorMessage = "";
				return true;
			}
			catch(Exception ex)
			{		
				strErrorMessage = ex.Message.ToString();
				return false;
			}			  
		}


		/// <summary>
		/// To Delelte any Organization from database, not used in this application.
		/// </summary>
		/// <param name="mOrgID">Organziation ID, automatically generated by the System</param>
		/// <returns>yes/No (Deleted or not)</returns>
		public bool rsDelete(string mOrgID)
		{
			try
			{
				ObjDLOrganizations.PKeycode = mOrgID; 
				ObjTrans.Start_Transaction(); 
				strErrorMessage = ObjTrans.DataTrigger_Delete(ObjDLOrganizations); 
				ObjTrans.End_Transaction(); 
				
				if (strErrorMessage == "True") 
				{
					strErrorMessage = ObjTrans.OperationError;
					return false;
				}

				strErrorMessage = "";
				return true;
			}
			catch(Exception ex)
			{		
				strErrorMessage = ex.Message.ToString();
				return false;
			}
		}


		/// <summary>
		///	Display All Record - Return type DataView
		/// </summary>		
		public DataView rsGetAll(string mName, string mActive, string mOType, string mBilling, string mPersonToContact, string mAddress, string mPhoneNo, string mEmail)
		{
			ObjDLOrganizations.Name = mName; 
			ObjDLOrganizations.Active = mActive; 		
			ObjDLOrganizations.OType = mOType; 
			ObjDLOrganizations.Billing = mBilling;
			ObjDLOrganizations.PersonToContact = mPersonToContact;
			ObjDLOrganizations.Address = mAddress;
			ObjDLOrganizations.PhoneNo = mPhoneNo;
			ObjDLOrganizations.Email = mEmail;
			
			return ObjTrans.DataTrigger_Get_All(ObjDLOrganizations);
		}


		/// <summary>
		///	Return Single Record - Paramater Application ID - Return type DataView
		/// </summary>		
		public DataView rsGetSingle(string mOrgID)
		{
			ObjDLOrganizations.PKeycode = mOrgID; 
			return ObjTrans.DataTrigger_Get_Single(ObjDLOrganizations);
		}

		public string rsGetAcronym(string strOrgID)
		{
			DataView dvOrg = rsGetSingle(strOrgID);
			string strOrgName = dvOrg.Table.Rows[0]["Name"].ToString();

			string [] arrOrgName = strOrgName.Split(' ');
			string strOrgAcronym = "";

			foreach(string ONamePart in arrOrgName)
			{
				if(objValid.IsAlpha(ONamePart.Substring(0, 1)))
				{
					strOrgAcronym += ONamePart.Substring(0, 1);
				}
			}

			strOrgAcronym += '-';
			return strOrgAcronym;
		}


		/// <summary>
		/// Function to Validate Organization Name already exist in database or not.
		/// </summary>
		/// <param name="mName">Organization Name</param>
		/// <returns>Yes/No</returns>
		private bool VD_Name(string mOrgID, string mName)
		{
			if(mName == "")
			{
				strErrorMessage = Error003;
				return false;
			}

			DataView dvOrg = new DataView();
			dvOrg = rsGetAll(mName, "", "", "", "", "", "", "");

			if (mOrgID != "")
			{
				dvOrg.RowFilter ="OrgID<>'" + mOrgID + "'";
				//		mDataView.RowStateFilter = DataViewRowState.OriginalRows;
			}

			if (dvOrg.Count > 0)
			{
				strErrorMessage = Error001;
				return false;
			}
			else
			{
				return true;
			}
		}


		private bool VD_Date(string strDate)
		{
			ObjDateFormat.DateTimeFormat.ShortDatePattern ="dd/MM/yyyy"; 
			System.Threading.Thread.CurrentThread.CurrentCulture = ObjDateFormat;

			try
			{
				System.DateTime.Parse(strDate);
				return true;
			}  
			catch(Exception)
			{
				strErrorMessage=Error002; //"Invalid Date";
				return false;				
			}		
		}
	}
}